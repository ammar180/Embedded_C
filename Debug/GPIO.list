
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f40  08000f48  00001f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f40  08000f40  00001f48  2**0
                  CONTENTS
  4 .ARM          00000000  08000f40  08000f40  00001f48  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f40  08000f48  00001f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f40  08000f40  00001f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f44  08000f44  00001f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000f48  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000f48  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dba  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044f  00000000  00000000  00002d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00003188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008b  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000111d  00000000  00000000  000032e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fe1  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004401  00000000  00000000  000053e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000097e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000344  00000000  00000000  00009828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00009b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f28 	.word	0x08000f28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000f28 	.word	0x08000f28

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <ADC_EnableClock>:
#include "Stm32f401-ADC-handler.h"

void ADC_EnableClock(void) {
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 8); // Enable ADC1 clock
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <ADC_EnableClock+0x1c>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <ADC_EnableClock+0x1c>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <ADC_Init>:

void ADC_Init(ADC_Channel channel, ADC_SampleTime sampleTime, ADC_CR1_Bits resolution) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	603a      	str	r2, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	460b      	mov	r3, r1
 80009f2:	71bb      	strb	r3, [r7, #6]
	ADC1->CR2 |= (1 << 0);      // Enable ADC (ADON bit)
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <ADC_Init+0x48>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a2c <ADC_Init+0x48>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6093      	str	r3, [r2, #8]

		/**
		 * @note Short delay for ADC stabilization.
		 */
		for (volatile int i = 0; i < 1000; i++); // Short delay
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e002      	b.n	8000a0c <ADC_Init+0x28>
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a12:	dbf8      	blt.n	8000a06 <ADC_Init+0x22>

		/**
		 * @note Use default 12-bit resolution (CR1 = 0).
		 */
		ADC1->CR1 = 0;              // 12-bit resolution (default)
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <ADC_Init+0x48>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]

		/**
		 * @note Set ADC channel 0 (PA0) as the first conversion.
		 */
		ADC1->SQR3 = 0;
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <ADC_Init+0x48>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	635a      	str	r2, [r3, #52]	@ 0x34
//        ADC1->SMPR2 |= (sampleTime << (channel * 3)); // Set sampling time for channels 0-9
//    } else {
//        ADC1->SMPR1 |= (sampleTime << ((channel - ADC_CHANNEL_10) * 3)); // Set sampling time for channels 10-18
//    }
//    ADC1->SQR3 = channel; // Set the channel as the first conversion in regular sequence
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40012000 	.word	0x40012000

08000a30 <ADC_Read>:

uint32_t ADC_Read(void) {
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
    ADC1->CR2 |= (1 << 30); // Start conversion
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <ADC_Read+0x2c>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <ADC_Read+0x2c>)
 8000a3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000a3e:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR &  (1 << 1))); // Wait for conversion to complete
 8000a40:	bf00      	nop
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <ADC_Read+0x2c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f9      	beq.n	8000a42 <ADC_Read+0x12>
    return ADC1->DR; // Read ADC value from data register
 8000a4e:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <ADC_Read+0x2c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40012000 	.word	0x40012000

08000a60 <ConvertToTemperature>:
int ConvertToTemperature(uint32_t adcValue, ADC_CR1_Bits resolution) {
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
    // Calculate the number of bits for the resolution
    int bits;

    // Determine the number of bits based on the resolution parameter
    switch (resolution) {
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8000a70:	d01c      	beq.n	8000aac <ConvertToTemperature+0x4c>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8000a78:	d81b      	bhi.n	8000ab2 <ConvertToTemperature+0x52>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a80:	d011      	beq.n	8000aa6 <ConvertToTemperature+0x46>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a88:	d813      	bhi.n	8000ab2 <ConvertToTemperature+0x52>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <ConvertToTemperature+0x3a>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000a96:	d003      	beq.n	8000aa0 <ConvertToTemperature+0x40>
 8000a98:	e00b      	b.n	8000ab2 <ConvertToTemperature+0x52>
        case ADC_CR1_RES_12B:
            bits = 12;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	60fb      	str	r3, [r7, #12]
            break;
 8000a9e:	e00b      	b.n	8000ab8 <ConvertToTemperature+0x58>
        case ADC_CR1_RES_10B:
            bits = 10;
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	60fb      	str	r3, [r7, #12]
            break;
 8000aa4:	e008      	b.n	8000ab8 <ConvertToTemperature+0x58>
        case ADC_CR1_RES_8B:
            bits = 8;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	60fb      	str	r3, [r7, #12]
            break;
 8000aaa:	e005      	b.n	8000ab8 <ConvertToTemperature+0x58>
        case ADC_CR1_RES_6B:
            bits = 6;
 8000aac:	2306      	movs	r3, #6
 8000aae:	60fb      	str	r3, [r7, #12]
            break;
 8000ab0:	e002      	b.n	8000ab8 <ConvertToTemperature+0x58>
        default:
            bits = 12; // Default to 12-bit resolution
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	60fb      	str	r3, [r7, #12]
            break;
 8000ab6:	bf00      	nop
    }

    // Convert ADC value to temperature in Celsius
    int temperature = (adcValue * 3.3 / (1 << bits)) / 0.01; // Modify as per sensor specifics
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fccf 	bl	800045c <__aeabi_ui2d>
 8000abe:	a316      	add	r3, pc, #88	@ (adr r3, 8000b18 <ConvertToTemperature+0xb8>)
 8000ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac4:	f7ff fd44 	bl	8000550 <__aeabi_dmul>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4614      	mov	r4, r2
 8000ace:	461d      	mov	r5, r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fccf 	bl	800047c <__aeabi_i2d>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	4629      	mov	r1, r5
 8000ae6:	f7ff fe5d 	bl	80007a4 <__aeabi_ddiv>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4610      	mov	r0, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	a30b      	add	r3, pc, #44	@ (adr r3, 8000b20 <ConvertToTemperature+0xc0>)
 8000af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af8:	f7ff fe54 	bl	80007a4 <__aeabi_ddiv>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4610      	mov	r0, r2
 8000b02:	4619      	mov	r1, r3
 8000b04:	f7ff ff36 	bl	8000974 <__aeabi_d2iz>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60bb      	str	r3, [r7, #8]

    return temperature;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bdb0      	pop	{r4, r5, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	66666666 	.word	0x66666666
 8000b1c:	400a6666 	.word	0x400a6666
 8000b20:	47ae147b 	.word	0x47ae147b
 8000b24:	3f847ae1 	.word	0x3f847ae1

08000b28 <GPIO_EnableClock>:
 *      Author: ammar.ahmed
 */

#include "Stm32f401-gpio.h"

void GPIO_EnableClock(GPIO *pGPIOx){
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <GPIO_EnableClock+0x54>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d106      	bne.n	8000b46 <GPIO_EnableClock+0x1e>
		RCC->AHB1ENR |=(1<<0);
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <GPIO_EnableClock+0x58>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <GPIO_EnableClock+0x58>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
	}else if(pGPIOx == GPIOB){
		RCC->AHB1ENR |=(1<<1);
	}else if(pGPIOx == GPIOC){
		RCC->AHB1ENR |=(1<<2);
	}
}
 8000b44:	e014      	b.n	8000b70 <GPIO_EnableClock+0x48>
	}else if(pGPIOx == GPIOB){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <GPIO_EnableClock+0x5c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <GPIO_EnableClock+0x34>
		RCC->AHB1ENR |=(1<<1);
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <GPIO_EnableClock+0x58>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <GPIO_EnableClock+0x58>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b5a:	e009      	b.n	8000b70 <GPIO_EnableClock+0x48>
	}else if(pGPIOx == GPIOC){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <GPIO_EnableClock+0x60>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d105      	bne.n	8000b70 <GPIO_EnableClock+0x48>
		RCC->AHB1ENR |=(1<<2);
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <GPIO_EnableClock+0x58>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <GPIO_EnableClock+0x58>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020800 	.word	0x40020800

08000b8c <GPIO_Init>:

void GPIO_Init(GPIO *pGPIOx , int pinNumber , GPIO_Mode mode , GPIO_Speed speed , GPIO_OutputType outputType , GPIO_PullType pull){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71bb      	strb	r3, [r7, #6]
	pGPIOx->MODER &= ~(0x3 << (pinNumber * 2));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2103      	movs	r1, #3
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	601a      	str	r2, [r3, #0]
	pGPIOx->MODER |= (mode << (pinNumber * 2));
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	79f9      	ldrb	r1, [r7, #7]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	601a      	str	r2, [r3, #0]

	pGPIOx->OSPEEDER &= ~(0x3 << (pinNumber * 2));
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	401a      	ands	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEEDER |= (speed << (pinNumber * 2));
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	79b9      	ldrb	r1, [r7, #6]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	609a      	str	r2, [r3, #8]

	pGPIOx->OTYPER &= ~(0x1 << (pinNumber));
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	401a      	ands	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= (outputType << (pinNumber));
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	7e39      	ldrb	r1, [r7, #24]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	605a      	str	r2, [r3, #4]

	pGPIOx->PUPDR &= ~(0x3 << (pinNumber * 2));
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2103      	movs	r1, #3
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= (pull << (pinNumber * 2));
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	7f39      	ldrb	r1, [r7, #28]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	431a      	orrs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	60da      	str	r2, [r3, #12]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <GPIO_WriteOutputPin>:

void GPIO_WriteOutputPin(GPIO *pGPIOx , int pinNumber , int value ){
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	if(value == 1){
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d109      	bne.n	8000c78 <GPIO_WriteOutputPin+0x26>
		pGPIOx->ODR |= (1 << pinNumber);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	695a      	ldr	r2, [r3, #20]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	615a      	str	r2, [r3, #20]
	}else if (value == 0){
		pGPIOx->ODR &= ~(1 << pinNumber); 
	}
}
 8000c76:	e00c      	b.n	8000c92 <GPIO_WriteOutputPin+0x40>
	}else if (value == 0){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d109      	bne.n	8000c92 <GPIO_WriteOutputPin+0x40>
		pGPIOx->ODR &= ~(1 << pinNumber); 
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	2101      	movs	r1, #1
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	615a      	str	r2, [r3, #20]
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <GPIO_ReadInputPin>:

void GPIO_TogglePin(GPIO *pGPIOx, int pinNumber){
	pGPIOx->ODR ^= (1 << pinNumber);
}

int GPIO_ReadInputPin(GPIO *pGPIOx, int pinNumber){
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	return ((pGPIOx->IDR >> pinNumber) & 0x1);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	fa42 f303 	asr.w	r3, r2, r3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <delay>:
    BUTTON_PIN,
    BUZZER_PIN,
    FAN_PIN,
} PinNumber;

void delay(volatile uint32_t time) {
 8000cc2:	b480      	push	{r7}
 8000cc4:	b085      	sub	sp, #20
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < time * 1000; i++);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	e002      	b.n	8000cd6 <delay+0x14>
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3f4      	bcc.n	8000cd0 <delay+0xe>
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <ConvertCelsiusToFahrenheit>:

int ConvertCelsiusToFahrenheit(int temperature)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    return (temperature * 9 / 5) + 32;
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	4a06      	ldr	r2, [pc, #24]	@ (8000d20 <ConvertCelsiusToFahrenheit+0x2c>)
 8000d06:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0a:	1052      	asrs	r2, r2, #1
 8000d0c:	17db      	asrs	r3, r3, #31
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	3320      	adds	r3, #32
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	66666667 	.word	0x66666667

08000d24 <main>:

int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af02      	add	r7, sp, #8
    GPIO_EnableClock(GPIOA);
 8000d2a:	4857      	ldr	r0, [pc, #348]	@ (8000e88 <main+0x164>)
 8000d2c:	f7ff fefc 	bl	8000b28 <GPIO_EnableClock>
    ADC_EnableClock();
 8000d30:	f7ff fe48 	bl	80009c4 <ADC_EnableClock>

    // define the LM35 temperature sensor pin as an analog input (for temperature measurement via ADC)
    GPIOA->MODER |= (ANALOG << TEMP_SENSOR_PIN);
 8000d34:	4b54      	ldr	r3, [pc, #336]	@ (8000e88 <main+0x164>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a53      	ldr	r2, [pc, #332]	@ (8000e88 <main+0x164>)
 8000d3a:	f043 0303 	orr.w	r3, r3, #3
 8000d3e:	6013      	str	r3, [r2, #0]
    // GPIO_Init(GPIOA, TEMP_SENSOR_PIN, ANALOG, LOW_SPEED, PUSH_PULL, PULL_UP);
    // define teh 3 LEDs pins (Green, Yellow, Red for status indication)
    GPIO_Init(GPIOA, RED_LED_PIN, OUTPUT, LOW_SPEED, PUSH_PULL, PULL_UP);    // Red LED
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	2300      	movs	r3, #0
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	484e      	ldr	r0, [pc, #312]	@ (8000e88 <main+0x164>)
 8000d50:	f7ff ff1c 	bl	8000b8c <GPIO_Init>
    GPIO_Init(GPIOA, GREEN_LED_PIN, OUTPUT, LOW_SPEED, PUSH_PULL, PULL_UP);  // Green LED
 8000d54:	2301      	movs	r3, #1
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2102      	movs	r1, #2
 8000d62:	4849      	ldr	r0, [pc, #292]	@ (8000e88 <main+0x164>)
 8000d64:	f7ff ff12 	bl	8000b8c <GPIO_Init>
    GPIO_Init(GPIOA, YELLOW_LED_PIN, OUTPUT, LOW_SPEED, PUSH_PULL, PULL_UP); // Yellow LED
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2300      	movs	r3, #0
 8000d72:	2201      	movs	r2, #1
 8000d74:	2103      	movs	r1, #3
 8000d76:	4844      	ldr	r0, [pc, #272]	@ (8000e88 <main+0x164>)
 8000d78:	f7ff ff08 	bl	8000b8c <GPIO_Init>

    // define the button pin as an input (to switch temperature units and reset the system)
    GPIO_Init(GPIOA, BUTTON_PIN, INPUT, LOW_SPEED, PUSH_PULL, PULL_UP);
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	2300      	movs	r3, #0
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	2104      	movs	r1, #4
 8000d8a:	483f      	ldr	r0, [pc, #252]	@ (8000e88 <main+0x164>)
 8000d8c:	f7ff fefe 	bl	8000b8c <GPIO_Init>
    // define buzzer pin as an output  (for critical temperature alerts)
    GPIO_Init(GPIOA, BUZZER_PIN, OUTPUT, LOW_SPEED, PUSH_PULL, PULL_UP);
 8000d90:	2301      	movs	r3, #1
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	2300      	movs	r3, #0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	483a      	ldr	r0, [pc, #232]	@ (8000e88 <main+0x164>)
 8000da0:	f7ff fef4 	bl	8000b8c <GPIO_Init>
    // define fan as output (controlled through GPIO)
    GPIO_Init(GPIOA, FAN_PIN, OUTPUT, LOW_SPEED, PUSH_PULL, PULL_UP);
 8000da4:	2301      	movs	r3, #1
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	2300      	movs	r3, #0
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2300      	movs	r3, #0
 8000dae:	2201      	movs	r2, #1
 8000db0:	2106      	movs	r1, #6
 8000db2:	4835      	ldr	r0, [pc, #212]	@ (8000e88 <main+0x164>)
 8000db4:	f7ff feea 	bl	8000b8c <GPIO_Init>

    // Initialize the ADC to read from the temperature sensor
    ADC_Init(ADC_CHANNEL_0, ADC_SAMPLETIME_3CYCLES, ADC_CR1_RES_12B);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fe11 	bl	80009e4 <ADC_Init>

    while (1)
    {
        // Read temperature sensor value
        uint32_t adcValue = ADC_Read();
 8000dc2:	f7ff fe35 	bl	8000a30 <ADC_Read>
 8000dc6:	60f8      	str	r0, [r7, #12]
        int temperature = ConvertToTemperature(adcValue, ADC_CR1_RES_12B);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fe48 	bl	8000a60 <ConvertToTemperature>
 8000dd0:	60b8      	str	r0, [r7, #8]
         * Below 25°C → Green LED ON, Fan OFF
         * 26°C – 35°C → Yellow LED ON, Fan ON
         * Above 35°C → Red LED ON, Fan ON
         * Above 45°C → Red LED + Buzzer ON (Critical Alert)
         */
        if (temperature < 25)
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b18      	cmp	r3, #24
 8000dd6:	dc0a      	bgt.n	8000dee <main+0xca>
        {
            GPIO_WriteOutputPin(GPIOA, GREEN_LED_PIN, 1); // Green LED ON
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2102      	movs	r1, #2
 8000ddc:	482a      	ldr	r0, [pc, #168]	@ (8000e88 <main+0x164>)
 8000dde:	f7ff ff38 	bl	8000c52 <GPIO_WriteOutputPin>
            GPIO_WriteOutputPin(GPIOA, FAN_PIN, 0); // Fan OFF
 8000de2:	2200      	movs	r2, #0
 8000de4:	2106      	movs	r1, #6
 8000de6:	4828      	ldr	r0, [pc, #160]	@ (8000e88 <main+0x164>)
 8000de8:	f7ff ff33 	bl	8000c52 <GPIO_WriteOutputPin>
 8000dec:	e030      	b.n	8000e50 <main+0x12c>
        }
        else if (temperature >= 26 && temperature <= 35)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b19      	cmp	r3, #25
 8000df2:	dd0d      	ble.n	8000e10 <main+0xec>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b23      	cmp	r3, #35	@ 0x23
 8000df8:	dc0a      	bgt.n	8000e10 <main+0xec>
        {
            GPIO_WriteOutputPin(GPIOA, YELLOW_LED_PIN, 1); // Yellow LED ON
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	4822      	ldr	r0, [pc, #136]	@ (8000e88 <main+0x164>)
 8000e00:	f7ff ff27 	bl	8000c52 <GPIO_WriteOutputPin>
            GPIO_WriteOutputPin(GPIOA, FAN_PIN, 1); // Fan ON
 8000e04:	2201      	movs	r2, #1
 8000e06:	2106      	movs	r1, #6
 8000e08:	481f      	ldr	r0, [pc, #124]	@ (8000e88 <main+0x164>)
 8000e0a:	f7ff ff22 	bl	8000c52 <GPIO_WriteOutputPin>
 8000e0e:	e01f      	b.n	8000e50 <main+0x12c>
        }
        else if (temperature > 35 && temperature < 45)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b23      	cmp	r3, #35	@ 0x23
 8000e14:	dd0d      	ble.n	8000e32 <main+0x10e>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e1a:	dc0a      	bgt.n	8000e32 <main+0x10e>
        {
            GPIO_WriteOutputPin(GPIOA, RED_LED_PIN, 1); // Red LED ON
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <main+0x164>)
 8000e22:	f7ff ff16 	bl	8000c52 <GPIO_WriteOutputPin>
            GPIO_WriteOutputPin(GPIOA, FAN_PIN, 1); // Fan ON
 8000e26:	2201      	movs	r2, #1
 8000e28:	2106      	movs	r1, #6
 8000e2a:	4817      	ldr	r0, [pc, #92]	@ (8000e88 <main+0x164>)
 8000e2c:	f7ff ff11 	bl	8000c52 <GPIO_WriteOutputPin>
 8000e30:	e00e      	b.n	8000e50 <main+0x12c>
        }
        else
        {
            GPIO_WriteOutputPin(GPIOA, RED_LED_PIN, 1); // Red LED ON
 8000e32:	2201      	movs	r2, #1
 8000e34:	2101      	movs	r1, #1
 8000e36:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <main+0x164>)
 8000e38:	f7ff ff0b 	bl	8000c52 <GPIO_WriteOutputPin>
            GPIO_WriteOutputPin(GPIOA, BUZZER_PIN, 1); // Buzzer ON
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2105      	movs	r1, #5
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <main+0x164>)
 8000e42:	f7ff ff06 	bl	8000c52 <GPIO_WriteOutputPin>
            GPIO_WriteOutputPin(GPIOA, FAN_PIN, 1); // Fan ON
 8000e46:	2201      	movs	r2, #1
 8000e48:	2106      	movs	r1, #6
 8000e4a:	480f      	ldr	r0, [pc, #60]	@ (8000e88 <main+0x164>)
 8000e4c:	f7ff ff01 	bl	8000c52 <GPIO_WriteOutputPin>
        /**
         * Button Functions:
         * Short Press: Toggle between Celsius (°C) and Fahrenheit (°F) display.
         * Long Press: Reset the entire system
         */
        if (GPIO_ReadInputPin(GPIOA, BUTTON_PIN) == 0)
 8000e50:	2104      	movs	r1, #4
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <main+0x164>)
 8000e54:	f7ff ff23 	bl	8000c9e <GPIO_ReadInputPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1b1      	bne.n	8000dc2 <main+0x9e>
        {
            delay(500); // Delay for 0.5 second
 8000e5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e62:	f7ff ff2e 	bl	8000cc2 <delay>
            if (GPIO_ReadInputPin(GPIOA, BUTTON_PIN) == 0)
 8000e66:	2104      	movs	r1, #4
 8000e68:	4807      	ldr	r0, [pc, #28]	@ (8000e88 <main+0x164>)
 8000e6a:	f7ff ff18 	bl	8000c9e <GPIO_ReadInputPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0a6      	beq.n	8000dc2 <main+0x9e>
            }
            else
            {
                // Short press detected
                // Toggle between Celsius and Fahrenheit
                float fahrenheit = ConvertCelsiusToFahrenheit(temperature);
 8000e74:	68b8      	ldr	r0, [r7, #8]
 8000e76:	f7ff ff3d 	bl	8000cf4 <ConvertCelsiusToFahrenheit>
 8000e7a:	ee07 0a90 	vmov	s15, r0
 8000e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e82:	edc7 7a01 	vstr	s15, [r7, #4]
    {
 8000e86:	e79c      	b.n	8000dc2 <main+0x9e>
 8000e88:	40020000 	.word	0x40020000

08000e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eba:	f000 f811 	bl	8000ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff ff31 	bl	8000d24 <main>

08000ec2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ed0:	08000f48 	.word	0x08000f48
  ldr r2, =_sbss
 8000ed4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ed8:	2000001c 	.word	0x2000001c

08000edc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <__libc_init_array>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8000f18 <__libc_init_array+0x38>)
 8000ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8000f1c <__libc_init_array+0x3c>)
 8000ee6:	1b64      	subs	r4, r4, r5
 8000ee8:	10a4      	asrs	r4, r4, #2
 8000eea:	2600      	movs	r6, #0
 8000eec:	42a6      	cmp	r6, r4
 8000eee:	d109      	bne.n	8000f04 <__libc_init_array+0x24>
 8000ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8000f20 <__libc_init_array+0x40>)
 8000ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8000f24 <__libc_init_array+0x44>)
 8000ef4:	f000 f818 	bl	8000f28 <_init>
 8000ef8:	1b64      	subs	r4, r4, r5
 8000efa:	10a4      	asrs	r4, r4, #2
 8000efc:	2600      	movs	r6, #0
 8000efe:	42a6      	cmp	r6, r4
 8000f00:	d105      	bne.n	8000f0e <__libc_init_array+0x2e>
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f08:	4798      	blx	r3
 8000f0a:	3601      	adds	r6, #1
 8000f0c:	e7ee      	b.n	8000eec <__libc_init_array+0xc>
 8000f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f12:	4798      	blx	r3
 8000f14:	3601      	adds	r6, #1
 8000f16:	e7f2      	b.n	8000efe <__libc_init_array+0x1e>
 8000f18:	08000f40 	.word	0x08000f40
 8000f1c:	08000f40 	.word	0x08000f40
 8000f20:	08000f40 	.word	0x08000f40
 8000f24:	08000f44 	.word	0x08000f44

08000f28 <_init>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	bf00      	nop
 8000f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2e:	bc08      	pop	{r3}
 8000f30:	469e      	mov	lr, r3
 8000f32:	4770      	bx	lr

08000f34 <_fini>:
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	bf00      	nop
 8000f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3a:	bc08      	pop	{r3}
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4770      	bx	lr
