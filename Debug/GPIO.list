
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  08000474  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00001474  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00001474  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  08000474  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0000146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000470  08000470  00001470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000474  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000474  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000575  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000265  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001067  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a1a  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003edf  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000076ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  00007714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00007870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000454 	.word	0x08000454

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000454 	.word	0x08000454

080001d4 <GPIO_EnableClock>:
 *      Author: ammar.ahmed
 */

#include "Stm32f401-gpio.h"

void GPIO_EnableClock(GPIO *pGPIOx){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a12      	ldr	r2, [pc, #72]	@ (8000228 <GPIO_EnableClock+0x54>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d106      	bne.n	80001f2 <GPIO_EnableClock+0x1e>
		RCC->AHB1ENR |=(1<<0);
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <GPIO_EnableClock+0x58>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a10      	ldr	r2, [pc, #64]	@ (800022c <GPIO_EnableClock+0x58>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
	}else if(pGPIOx == GPIOB){
		RCC->AHB1ENR |=(1<<1);
	}else if(pGPIOx == GPIOC){
		RCC->AHB1ENR |=(1<<2);
	}
}
 80001f0:	e014      	b.n	800021c <GPIO_EnableClock+0x48>
	}else if(pGPIOx == GPIOB){
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <GPIO_EnableClock+0x5c>)
 80001f6:	4293      	cmp	r3, r2
 80001f8:	d106      	bne.n	8000208 <GPIO_EnableClock+0x34>
		RCC->AHB1ENR |=(1<<1);
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <GPIO_EnableClock+0x58>)
 80001fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fe:	4a0b      	ldr	r2, [pc, #44]	@ (800022c <GPIO_EnableClock+0x58>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000206:	e009      	b.n	800021c <GPIO_EnableClock+0x48>
	}else if(pGPIOx == GPIOC){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <GPIO_EnableClock+0x60>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d105      	bne.n	800021c <GPIO_EnableClock+0x48>
		RCC->AHB1ENR |=(1<<2);
 8000210:	4b06      	ldr	r3, [pc, #24]	@ (800022c <GPIO_EnableClock+0x58>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a05      	ldr	r2, [pc, #20]	@ (800022c <GPIO_EnableClock+0x58>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	40020000 	.word	0x40020000
 800022c:	40023800 	.word	0x40023800
 8000230:	40020400 	.word	0x40020400
 8000234:	40020800 	.word	0x40020800

08000238 <GPIO_Init>:

void GPIO_Init(GPIO *pGPIOx , int pinNumber , int mode , int speed , int outputType , int pull){
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
 8000244:	603b      	str	r3, [r7, #0]
	pGPIOx->MODER &= ~(0x3 << (pinNumber * 2));
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	2103      	movs	r1, #3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	43db      	mvns	r3, r3
 8000256:	401a      	ands	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]
	pGPIOx->MODER |= (mode << (pinNumber * 2));
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	fa01 f303 	lsl.w	r3, r1, r3
 800026a:	431a      	orrs	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	601a      	str	r2, [r3, #0]

	pGPIOx->OSPEEDER &= ~(0x3 << (pinNumber * 2));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	689a      	ldr	r2, [r3, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	2103      	movs	r1, #3
 800027a:	fa01 f303 	lsl.w	r3, r1, r3
 800027e:	43db      	mvns	r3, r3
 8000280:	401a      	ands	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEEDER |= (speed << (pinNumber * 2));
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	689a      	ldr	r2, [r3, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	6839      	ldr	r1, [r7, #0]
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	431a      	orrs	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	609a      	str	r2, [r3, #8]

	pGPIOx->OTYPER &= ~(0x1 << (pinNumber));
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685a      	ldr	r2, [r3, #4]
 800029e:	2101      	movs	r1, #1
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	43db      	mvns	r3, r3
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= (outputType << (pinNumber));
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	69b9      	ldr	r1, [r7, #24]
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ba:	431a      	orrs	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	605a      	str	r2, [r3, #4]

	pGPIOx->PUPDR &= ~(0x3 << (pinNumber * 2));
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	2103      	movs	r1, #3
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	43db      	mvns	r3, r3
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= (pull << (pinNumber * 2));
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	68da      	ldr	r2, [r3, #12]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	69f9      	ldr	r1, [r7, #28]
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	431a      	orrs	r2, r3
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	60da      	str	r2, [r3, #12]
}
 80002ea:	bf00      	nop
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <GPIO_WriteOutputPin>:

void GPIO_WriteOutputPin(GPIO *pGPIOx , int pinNumber , int value ){
 80002f6:	b480      	push	{r7}
 80002f8:	b085      	sub	sp, #20
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	60f8      	str	r0, [r7, #12]
 80002fe:	60b9      	str	r1, [r7, #8]
 8000300:	607a      	str	r2, [r7, #4]
	if(value == 1){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d109      	bne.n	800031c <GPIO_WriteOutputPin+0x26>
		pGPIOx->ODR |= (1 << pinNumber);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	2101      	movs	r1, #1
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	431a      	orrs	r2, r3
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	615a      	str	r2, [r3, #20]
	}else if (value == 0){
		pGPIOx->ODR &= ~(1 << pinNumber); 
	}
}
 800031a:	e00c      	b.n	8000336 <GPIO_WriteOutputPin+0x40>
	}else if (value == 0){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d109      	bne.n	8000336 <GPIO_WriteOutputPin+0x40>
		pGPIOx->ODR &= ~(1 << pinNumber); 
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	695a      	ldr	r2, [r3, #20]
 8000326:	2101      	movs	r1, #1
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	43db      	mvns	r3, r3
 8000330:	401a      	ands	r2, r3
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	615a      	str	r2, [r3, #20]
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <GPIO_ReadInputPin>:

void GPIO_TogglePin(GPIO *pGPIOx, int pinNumber){
	pGPIOx->ODR ^= (1 << pinNumber);
}

int GPIO_ReadInputPin(GPIO *pGPIOx, int pinNumber){
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	6039      	str	r1, [r7, #0]
	return ((pGPIOx->IDR >> pinNumber) & 0x1);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	691a      	ldr	r2, [r3, #16]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	fa42 f303 	asr.w	r3, r2, r3
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
	...

08000368 <main>:
void delay(volatile uint32_t time) {
    for(uint32_t i = 0; i < time * 1000; i++);
}

int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af02      	add	r7, sp, #8
	GPIO_EnableClock(GPIOA);
 800036e:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <main+0x4c>)
 8000370:	f7ff ff30 	bl	80001d4 <GPIO_EnableClock>

	GPIO_Init(GPIOA, 0, OUTPUT, PUSH_PULL, PULL_DOWN, LOW_SPEED);
 8000374:	2300      	movs	r3, #0
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	2301      	movs	r3, #1
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2300      	movs	r3, #0
 800037e:	2201      	movs	r2, #1
 8000380:	2100      	movs	r1, #0
 8000382:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <main+0x4c>)
 8000384:	f7ff ff58 	bl	8000238 <GPIO_Init>
	GPIO_Init(GPIOA, 2, OUTPUT, PUSH_PULL, PULL_UP, LOW_SPEED);
 8000388:	2300      	movs	r3, #0
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2300      	movs	r3, #0
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2300      	movs	r3, #0
 8000392:	2201      	movs	r2, #1
 8000394:	2102      	movs	r1, #2
 8000396:	4807      	ldr	r0, [pc, #28]	@ (80003b4 <main+0x4c>)
 8000398:	f7ff ff4e 	bl	8000238 <GPIO_Init>

	while(1)
	{
		// toggle LED on button press (pull )
		GPIO_WriteOutputPin(GPIOA, 2, GPIO_ReadInputPin(GPIOA, 0));
 800039c:	2100      	movs	r1, #0
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <main+0x4c>)
 80003a0:	f7ff ffcf 	bl	8000342 <GPIO_ReadInputPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	2102      	movs	r1, #2
 80003aa:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <main+0x4c>)
 80003ac:	f7ff ffa3 	bl	80002f6 <GPIO_WriteOutputPin>
 80003b0:	e7f4      	b.n	800039c <main+0x34>
 80003b2:	bf00      	nop
 80003b4:	40020000 	.word	0x40020000

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	@ (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	@ (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	@ (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	@ (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f811 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff ffbd 	bl	8000368 <main>

080003ee <LoopForever>:

LoopForever:
  b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	2000001c 	.word	0x2000001c

08000408 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	@ (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	@ (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	@ (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	@ (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
